/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
*/

import {
  Account,
  BigNumberish,
  BN,
  decompressBytecode,
  Script,
  StrSlice,
} from 'fuels';

import type { Enum, Vec } from "./common";

export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;

export type SwapExactOutputScriptInputs = [amount_out: BigNumberish, asset_out: AssetIdInput, amount_in_max: BigNumberish, pools: Vec<[AssetIdInput, AssetIdInput, boolean]>, recipient: IdentityInput, deadline: BigNumberish];
export type SwapExactOutputScriptOutput = Vec<[BN, AssetIdOutput]>;

export type SwapExactOutputScriptConfigurables = Partial<{
  AMM_CONTRACT_ID: ContractIdInput;
}>;

const abi = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "(struct std::asset_id::AssetId, struct std::asset_id::AssetId, bool)",
      "concreteTypeId": "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6",
      "metadataTypeId": 1
    },
    {
      "type": "(u64, struct std::asset_id::AssetId)",
      "concreteTypeId": "e10d8bfc338a29565debd72645b365f9b0481e462fd7d591848de4a73223d58d",
      "metadataTypeId": 0
    },
    {
      "type": "enum std::identity::Identity",
      "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335",
      "metadataTypeId": 4
    },
    {
      "type": "str",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    },
    {
      "type": "struct std::asset_id::AssetId",
      "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974",
      "metadataTypeId": 8
    },
    {
      "type": "struct std::contract_id::ContractId",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "metadataTypeId": 9
    },
    {
      "type": "struct std::vec::Vec<(struct std::asset_id::AssetId, struct std::asset_id::AssetId, bool)>",
      "concreteTypeId": "a5cbfec6a05585025be4180a09c2bd7944724d54ac729c9bebe421d061ee5378",
      "metadataTypeId": 11,
      "typeArguments": [
        "a95e1fcceb1451b8a76471f593f66c4a52ca04bde3c227c746ad7aaf988de5c6"
      ]
    },
    {
      "type": "struct std::vec::Vec<(u64, struct std::asset_id::AssetId)>",
      "concreteTypeId": "6f03bcbe6f8a1e01b5dcb5701ab21443606d1b323a888ead4e9a2ecda650ae2e",
      "metadataTypeId": 11,
      "typeArguments": [
        "e10d8bfc338a29565debd72645b365f9b0481e462fd7d591848de4a73223d58d"
      ]
    },
    {
      "type": "u32",
      "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
    },
    {
      "type": "u64",
      "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
    }
  ],
  "metadataTypes": [
    {
      "type": "(_, _)",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "__tuple_element",
          "typeId": 8
        }
      ]
    },
    {
      "type": "(_, _, _)",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "__tuple_element",
          "typeId": 8
        },
        {
          "name": "__tuple_element",
          "typeId": 8
        },
        {
          "name": "__tuple_element",
          "typeId": 3
        }
      ]
    },
    {
      "type": "b256",
      "metadataTypeId": 2
    },
    {
      "type": "bool",
      "metadataTypeId": 3
    },
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "Address",
          "typeId": 7
        },
        {
          "name": "ContractId",
          "typeId": 9
        }
      ]
    },
    {
      "type": "generic T",
      "metadataTypeId": 5
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 6
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    },
    {
      "type": "struct std::asset_id::AssetId",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 9,
      "components": [
        {
          "name": "bits",
          "typeId": 2
        }
      ]
    },
    {
      "type": "struct std::vec::RawVec",
      "metadataTypeId": 10,
      "components": [
        {
          "name": "ptr",
          "typeId": 6
        },
        {
          "name": "cap",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        5
      ]
    },
    {
      "type": "struct std::vec::Vec",
      "metadataTypeId": 11,
      "components": [
        {
          "name": "buf",
          "typeId": 10,
          "typeArguments": [
            {
              "name": "",
              "typeId": 5
            }
          ]
        },
        {
          "name": "len",
          "typeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        }
      ],
      "typeParameters": [
        5
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "amount_out",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "asset_out",
          "concreteTypeId": "c0710b6731b1dd59799cf6bef33eee3b3b04a2e40e80a0724090215bbf2ca974"
        },
        {
          "name": "amount_in_max",
          "concreteTypeId": "1506e6f44c1d6291cdf46395a8e573276a4fa79e8ace3fc891e092ef32d1b0a0"
        },
        {
          "name": "pools",
          "concreteTypeId": "a5cbfec6a05585025be4180a09c2bd7944724d54ac729c9bebe421d061ee5378"
        },
        {
          "name": "recipient",
          "concreteTypeId": "ab7cd04e05be58e3fc15d424c2c4a57f824a2a2d97d67252440a3925ebdc1335"
        },
        {
          "name": "deadline",
          "concreteTypeId": "d7649d428b9ff33d188ecbf38a7e4d8fd167fa01b2e10fe9a8f9308e52f1d7cc"
        }
      ],
      "name": "main",
      "output": "6f03bcbe6f8a1e01b5dcb5701ab21443606d1b323a888ead4e9a2ecda650ae2e",
      "attributes": null
    }
  ],
  "loggedTypes": [
    {
      "logId": "10098701174489624218",
      "concreteTypeId": "8c25cb3686462e9a86d2883c5688a22fe738b0bbc85f458d2d2b5f3f667c6d5a"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "AMM_CONTRACT_ID",
      "concreteTypeId": "29c10735d33b5159f0c71ee1dbd17b36a3e69e41f00fab0d42e1bd9f428d8a54",
      "offset": 18472
    }
  ]
};

const bytecode = decompressBytecode('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');

export class SwapExactOutputScript extends Script<SwapExactOutputScriptInputs, SwapExactOutputScriptOutput> {

  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(wallet: Account) {
    super(bytecode, abi, wallet);
  }
}
